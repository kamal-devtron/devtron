name: SQL FILE VALIDATOR

on:
  pull_request:
    branches: [main]
    types: [opened]
    paths:
      - 'scripts/sql/*' # Specify the path to your SQL folder

jobs:
  Job1:
    runs-on: ubuntu-latest
    env:
      PR_AUTHOR_GITHUB_ID: ${{ github.event.pull_request.user.login }}
    steps:
      - name: Find Github ID of PR AUTHOR
        run: |
          echo "PR author: ${PR_AUTHOR_GITHUB_ID}"
        
      - name: Checkout pull request HEAD
        id: checkout_pr_head
        uses: actions/checkout@v2        
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Check SQL file format and duplicates
        shell: bash
        env: 
          pr_no: ${{ github.event.pull_request.number }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "GitHub Token: $GH_TOKEN"
          git fetch origin main
          git diff origin/main...HEAD --name-only > mydiff
          echo "Changed SQL files:"
          cat mydiff
          echo "==============="

          file_list=$(git diff origin/main..HEAD --name-only | grep '^scripts/sql/')
          echo "==============="

          for filename in $file_list; do
            echo "Checking File: $filename"
            
            if [[ "$filename" =~ \.(up|down)\.sql$ ]]; then
              echo "File name is in the correct format: $filename"
            else
              echo "Error: File name is not in the correct format: $filename."
              gh pr comment $pr_no --body "Error: The SQL file name is not in the correct format: $filename."
              exit 1 
            }
            echo "Current directory: $(pwd)"
            
            cd scripts/sql/
            echo "SQL files directory: $(pwd)"
            
            migration_no=$(echo $filename | cut -d "/" -f 3 | cut -d "_" -f 1)
            echo "Migration Number: $migration_no"
            
            migration_files_of_this_no=$(ls | grep -i $migration_no | wc -l)
            cd ../../
            echo "Current directory: $(pwd)"
            
            echo "Migration Number: $migration_no"
            echo "Number of files with this migration number: $migration_files_of_this_no"
            
            if [[ $migration_files_of_this_no == "2" ]] ; then
              echo "All looks good for this migration number."
            else 
               echo "Error: Migration number is repeated."
               gh pr comment $pr_no --body "Error: The SQL file number is duplicated: $migration_no."
               exit 1
            fi
          done
